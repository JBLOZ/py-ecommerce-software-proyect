#!/usr/bin/env python3
"""
Script de prueba para verificar que el servicio de inferencia devuelve
etiquetas de ImageNet en lugar de √≠ndices num√©ricos.
"""

import requests
import sys
import os

def test_inference_service():
    """Prueba el servicio de inferencia con una imagen."""
    
    # URL del servicio de inferencia
    inference_url = "http://localhost:8001/infer/image/sync"
    
    # Ruta de la imagen de prueba
    image_path = "gato.jpeg"
    
    if not os.path.exists(image_path):
        print(f"Error: No se encontr√≥ la imagen {image_path}")
        return False
    
    try:
        # Preparar la imagen para la solicitud
        with open(image_path, 'rb') as f:
            files = {'file': ('test_image.jpg', f, 'image/jpeg')}
            
            print(f"Enviando imagen {image_path} al servicio de inferencia...")
            print(f"URL: {inference_url}")
            
            # Hacer la solicitud
            response = requests.post(inference_url, files=files, timeout=30)
            
            # Verificar la respuesta
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Respuesta exitosa: {response.status_code}")
                print(f"üìã Resultado completo: {result}")
                
                # Verificar si contiene categor√≠as
                if 'category' in result and result['category']:
                    categories = result['category']
                    top_prediction = categories[0] if categories else None
                    
                    if top_prediction and 'label' in top_prediction:
                        label = top_prediction['label']
                        confidence = top_prediction.get('confidence', 0)
                        print(f"üéØ Predicci√≥n principal: {label}")
                        print(f"üìä Confianza: {confidence:.4f}")
                        
                        # Verificar si es una etiqueta de ImageNet (string) y no un √≠ndice num√©rico
                        if isinstance(label, str) and not label.isdigit():
                            print("‚úÖ ¬°√âXITO! El servicio est√° devolviendo etiquetas de ImageNet correctamente")
                            print(f"üè∑Ô∏è  Clase detectada: '{label}'")
                            print(f"üîç Total de categor√≠as devueltas: {len(categories)}")
                            return True
                        else:
                            print(f"‚ùå ERROR: Se est√° devolviendo un √≠ndice num√©rico: {label}")
                            print("   El servicio deber√≠a devolver una etiqueta de ImageNet como 'Egyptian cat'")
                            return False
                    else:
                        print("‚ùå ERROR: No se encontr√≥ 'label' en la primera categor√≠a")
                        return False
                else:
                    print("‚ùå ERROR: No se encontr√≥ 'category' en la respuesta o est√° vac√≠a")
                    return False
            else:
                print(f"‚ùå Error en la solicitud: {response.status_code}")
                print(f"Respuesta: {response.text}")
                return False
                
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: No se pudo conectar al servicio de inferencia")
        print("   Verifica que el servicio est√© ejecut√°ndose en http://localhost:8001")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå ERROR: Timeout en la solicitud")
        return False
    except Exception as e:
        print(f"‚ùå ERROR inesperado: {str(e)}")
        return False

def check_service_health():
    """Verifica si el servicio est√° disponible."""
    try:
        health_url = "http://localhost:8001/health"
        response = requests.get(health_url, timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servicio de inferencia disponible")
            return True
        else:
            print(f"‚ö†Ô∏è  Servicio responde pero con estado: {response.status_code}")
            return False
    except:
        print("‚ùå Servicio de inferencia no disponible")
        return False

if __name__ == "__main__":
    print("üß™ Iniciando prueba del servicio de inferencia de SqueezeNet")
    print("=" * 60)
    
    # Verificar conectividad del servicio
    print("1. Verificando disponibilidad del servicio...")
    if not check_service_health():
        print("   Intentando continuar con la prueba...")
    
    print("\n2. Probando clasificaci√≥n de imagen...")
    success = test_inference_service()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ ¬°PRUEBA EXITOSA! El problema ha sido solucionado.")
        print("   El servicio ahora devuelve etiquetas de ImageNet en lugar de √≠ndices num√©ricos.")
    else:
        print("üí• PRUEBA FALLIDA. El problema a√∫n no est√° resuelto.")
        print("   Revisar los logs del servicio para m√°s informaci√≥n.")
    
    sys.exit(0 if success else 1)
