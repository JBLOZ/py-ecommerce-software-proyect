services:
  db:
    image: mariadb:latest
    container_name: ecommerce_mariadb
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ecommerce
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    restart: unless-stopped

  adminer:
    image: adminer:latest
    container_name: ecommerce_adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    restart: unless-stopped

  # Aplicación en producción - copia el código fuente en la imagen
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: backend
    environment:
      - DB_URL=mysql+pymysql://user:password@db/ecommerce
      - PYTHONPATH=src
    ports:
      - "8000:80"
    volumes:
      - ./logs:/code/logs
      - ./data:/code/data
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    command: /code/scripts/wait-for-it.sh db:3306 -t 60 -- fastapi run src/main.py --proxy-headers --port 80
      
volumes:
  mariadb_data:
  redis:
    profiles:
      - "dev"
      - "prod"
    image: redis:7-alpine
    ports:
      - "6379:6379"
  inference-dev:
    profiles:
      - "dev"
    build:
      context: ./inference
      dockerfile: Dockerfile
    container_name: inference-dev
    ports:
      - "8001:80"
    volumes:
      - ./inference/app:/code/app
      - ./squeezenet.onnx:/code/squeezenet.onnx
    environment:
      - SQUEEZENET_MODEL_PATH=/code/squeezenet.onnx
      - REDIS_URL=redis://redis:6379/0
    command: fastapi dev app/main.py --host 0.0.0.0 --port 80
    depends_on:
      - redis

  inference:
    profiles:
      - "prod"
    build:
      context: ./inference
      dockerfile: Dockerfile
    container_name: inference
    ports:
      - "8001:80"
    volumes:
      - ./squeezenet.onnx:/code/squeezenet.onnx
    environment:
      - SQUEEZENET_MODEL_PATH=/code/squeezenet.onnx
      - REDIS_URL=redis://redis:6379/0
    command: fastapi run app/main.py --host 0.0.0.0 --port 80
    depends_on:
      - redis

  celery:
    profiles:
      - "dev"
      - "prod"
    build:
      context: ./inference
      dockerfile: Dockerfile.worker
    container_name: celery
    volumes:
      - ./inference/app:/app
      - ./squeezenet.onnx:/app/squeezenet.onnx
    command: sh -c "cd /app && celery -A tasks worker --loglevel=info --concurrency=${THREADS_PER_WORKER:-1}"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - SQUEEZENET_MODEL_PATH=/app/squeezenet.onnx
      - BACKEND_WEBHOOK=""
    depends_on:
      - redis
  flower:
    profiles:
      - "dev"
      - "prod"
    build:
      context: ./inference
      dockerfile: Dockerfile.worker
    container_name: flower
    volumes:
      - ./inference/app:/app
    command: sh -c "cd /app && celery -A tasks flower --port=5555 --host=0.0.0.0"
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis

